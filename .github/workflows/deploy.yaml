
name: CI/CD Pipeline
on:
  push:
    branches: main
  pull_request:
    branches: main
jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Build with Maven
        env:
          SPRING_PROFILES_ACTIVE: test
        run: mvn -B package --file pom.xml

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: private

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: 443370714528.dkr.ecr.eu-central-1.amazonaws.com
          ECR_REPOSITORY: taskmanager
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy with Blue-Green strategy
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Register new task definition
        id: task-def
        run: |
          # Get current task definition
          aws ecs describe-task-definition --task-definition taskmanager-task --query taskDefinition > task-definition.json
          
          # Update container image in task definition to use latest tag
          jq '.containerDefinitions[0].image = "443370714528.dkr.ecr.eu-central-1.amazonaws.com/taskmanager:latest"' task-definition.json > new-task-definition.json
          
          # Register new task definition version
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --family taskmanager-task \
            --requires-compatibilities FARGATE \
            --network-mode awsvpc \
            --cpu 2048 \
            --memory 4096 \
            --execution-role-arn $(jq -r '.executionRoleArn' task-definition.json) \
            --task-role-arn $(jq -r '.taskRoleArn' task-definition.json) \
            --container-definitions "$(jq '.containerDefinitions' new-task-definition.json)" \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          echo "task_definition_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Create AppSpec file
        run: |
          cat > appspec.yaml << 'EOF'
          version: 0.0
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: "${TASK_DEF_ARN}"
                  LoadBalancerInfo:
                    ContainerName: "taskmanager-container"
                    ContainerPort: 8080
                  PlatformVersion: "LATEST"
          EOF
          
          # Replace placeholder with actual task definition ARN
          sed -i "s|\${TASK_DEF_ARN}|${{ steps.task-def.outputs.task_definition_arn }}|g" appspec.yaml
          
          # Print AppSpec for debugging
          cat appspec.yaml

      - name: Start CodeDeploy Deployment
        run: |
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name taskmanager-application \
            --deployment-group-name taskmanager-deployment-group \
            --revision revisionType=AppSpecContent,appSpecContent="{content='$(cat appspec.yaml)'}" \
            --description "Automated deployment via GitHub Actions" \
            --query 'deploymentId' \
            --output text)
          
          echo "Started deployment: $DEPLOYMENT_ID"
          
          # Monitor deployment - don't wait for completion to avoid GitHub Action timeouts
          aws deploy get-deployment --deployment-id $DEPLOYMENT_ID
          
          echo "Deployment ID: $DEPLOYMENT_ID"
          echo "Monitor the deployment progress in AWS CodeDeploy console"
